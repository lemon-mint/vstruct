import 'package:primitive/primitive.dart';
import 'dart:typed_data';
import 'dart:convert';

// Code generated by vstruct. DO NOT EDIT.
// Package Name: main

enum Speices {
	Human,
	Elf,
	Orc,
	Dwarf,
	Gnome,
	Halfling,
	HalfElf,
	HalfOrc,
	Dragonborn,
	Tiefling,
	Gnoll,
	Goblin,
}

enum ItemType {
	Weapon,
	Armor,
	Potion,
}

class Coordinate {
  Uint8List __vstruct__buf = Uint8List(0);

  Coordinate(I64 X, I64 Y) {
    int __vstruct__size = 16;
    __vstruct__buf = Uint8List(__vstruct__size);
    __vstruct__buf = Serialize(__vstruct__buf, X, Y);
  }

  int get lengthInBytes => __vstruct__buf.lengthInBytes;

  Uint8List as_bytes_mut() {
    return __vstruct__buf;
  }

  Uint8List Serialize(Uint8List dst, I64 X, I64 Y) {
    Uint8List __tmp_0 = X.toBytes();
    for (int i = 0; i < 8; i++) {
      dst[0 + i] = __tmp_0[i];
    }

    Uint8List __tmp_1 = Y.toBytes();
    for (int i = 0; i < 8; i++) {
      dst[8 + i] = __tmp_1[i];
    }

    return dst;
  }

}

class Item {
  Uint8List __vstruct__buf = Uint8List(0);

  Item(ItemType Type, I64 Damage, I64 Armor, String Name) {
    int __vstruct__size = 25 + Name.length;
    __vstruct__buf = Uint8List(__vstruct__size);
    __vstruct__buf = Serialize(__vstruct__buf, Type, Damage, Armor, Name);
  }

  int get lengthInBytes => __vstruct__buf.lengthInBytes;

  Uint8List as_bytes_mut() {
    return __vstruct__buf;
  }

  Uint8List Serialize(Uint8List dst, ItemType Type, I64 Damage, I64 Armor, String Name) {
    dst[0] = Type.index;

    Uint8List __tmp_1 = Damage.toBytes();
    for (int i = 0; i < 8; i++) {
      dst[1 + i] = __tmp_1[i];
    }

    Uint8List __tmp_2 = Armor.toBytes();
    for (int i = 0; i < 8; i++) {
      dst[9 + i] = __tmp_2[i];
    }

    U64 __index = U64(25);
    Uint8List __tmp_3 = (U64(Name.length) + __index).toBytes();
    for (int i = 0; i < 8; i++) {
      dst[17 + i] = __tmp_3[i];
    }
    List<int> __tmp_4 = utf8.encode(Name);
    Uint8List __tmp_5 = Uint8List.fromList(__tmp_4);
    for (int i = 0; i < Name.length; i++) {
      dst[(__index + U64(i)).value.toInt()] = __tmp_5[i];
    }
    return dst;
  }

}

class Inventory {
  Uint8List __vstruct__buf = Uint8List(0);

  Inventory(Item RightHand, Item LeftHand) {
    int __vstruct__size = 16 + RightHand.lengthInBytes + LeftHand.lengthInBytes;
    __vstruct__buf = Uint8List(__vstruct__size);
    __vstruct__buf = Serialize(__vstruct__buf, RightHand, LeftHand);
  }

  int get lengthInBytes => __vstruct__buf.lengthInBytes;

  Uint8List as_bytes_mut() {
    return __vstruct__buf;
  }

  Uint8List Serialize(Uint8List dst, Item RightHand, Item LeftHand) {
    U64 __index = U64(16);
    Uint8List __tmp_0 = (U64(RightHand.lengthInBytes) + __index).toBytes();
    for (int i = 0; i < 8; i++) {
      dst[0 + i] = __tmp_0[i];
    }
    Uint8List __tmp_1 = RightHand.as_bytes_mut();
    for (int i = 0; i < RightHand.lengthInBytes; i++) {
      dst[(__index + U64(i)).value.toInt()] = __tmp_1[i];
    }
    __index = __index + U64(RightHand.lengthInBytes);
    Uint8List __tmp_2 = (U64(LeftHand.lengthInBytes) + __index).toBytes();
    for (int i = 0; i < 8; i++) {
      dst[8 + i] = __tmp_2[i];
    }
    Uint8List __tmp_3 = LeftHand.as_bytes_mut();
    for (int i = 0; i < LeftHand.lengthInBytes; i++) {
      dst[(__index + U64(i)).value.toInt()] = __tmp_3[i];
    }
    return dst;
  }

}

class Entity {
  Uint8List __vstruct__buf = Uint8List(0);

  Entity(Speices Type, Coordinate Position, I64 Hp, UUID Id, Inventory Inventory) {
    int __vstruct__size = 41 + Id.length + Inventory.lengthInBytes;
    __vstruct__buf = Uint8List(__vstruct__size);
    __vstruct__buf = Serialize(__vstruct__buf, Type, Position, Hp, Id, Inventory);
  }

  int get lengthInBytes => __vstruct__buf.lengthInBytes;

  Uint8List as_bytes_mut() {
    return __vstruct__buf;
  }

  Uint8List Serialize(Uint8List dst, Speices Type, Coordinate Position, I64 Hp, UUID Id, Inventory Inventory) {
    dst[0] = Type.index;

    Uint8List __tmp_1 = Position.as_bytes_mut();
    for (int i = 0; i < Position.lengthInBytes; i++) {
      dst[1 + i] = __tmp_1[i];
    }

    Uint8List __tmp_2 = Hp.toBytes();
    for (int i = 0; i < 8; i++) {
      dst[17 + i] = __tmp_2[i];
    }

    U64 __index = U64(41);
    Uint8List __tmp_3 = (U64(Id.length) + __index).toBytes();
    for (int i = 0; i < 8; i++) {
      dst[25 + i] = __tmp_3[i];
    }
    List<int> __tmp_4 = utf8.encode(Id);
    Uint8List __tmp_5 = Uint8List.fromList(__tmp_4);
    for (int i = 0; i < Id.length; i++) {
      dst[(__index + U64(i)).value.toInt()] = __tmp_5[i];
    }
    __index = __index + U64(Id.length);
    Uint8List __tmp_6 = (U64(Inventory.lengthInBytes) + __index).toBytes();
    for (int i = 0; i < 8; i++) {
      dst[33 + i] = __tmp_6[i];
    }
    Uint8List __tmp_7 = Inventory.as_bytes_mut();
    for (int i = 0; i < Inventory.lengthInBytes; i++) {
      dst[(__index + U64(i)).value.toInt()] = __tmp_7[i];
    }
    return dst;
  }

}

typedef UUID = String;

